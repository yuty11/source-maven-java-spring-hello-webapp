pipeline {
  agent none

  environment {
    // 이미지 이름과 태그를 환경 변수로 명확히 지정 (소문자만 사용)
    DOCKER_IMAGE_NAME = "yuty1/myweb"
    DOCKER_IMAGE_TAG = "${BUILD_NUMBER}"
    DOCKER_IMAGE_LATEST = "latest"
  }

  stages {
    stage('Checkout') {
      agent {
        docker { image 'maven:3-openjdk-17' }
      }
      steps {
        echo "=== [Checkout] 소스 코드 체크아웃 시작 ==="
        git branch: 'main', url: 'https://github.com/yuty11/source-maven-java-spring-hello-webapp.git'
        echo "=== [Checkout] 완료 ==="
      }
    }
    stage('Build') {
      agent {
        docker { image 'maven:3-openjdk-17' }
      }
      steps {
        echo "=== [Build] Maven 빌드 시작 ==="
        sh 'mvn clean package -DskipTests=true'
        echo "=== [Build] 완료 ==="
      }
    }
    stage('Test') {
      agent {
        docker { image 'maven:3-openjdk-17' }
      }
      steps {
        echo "=== [Test] Maven 테스트 시작 ==="
        sh 'mvn test'
        echo "=== [Test] 완료 ==="
      }
    }
    stage('Build Docker Image') {
      agent { label 'controller' }
      steps {
        echo "=== [Docker Build] 이미지 빌드 시작 ==="
        sh 'echo "빌드할 이미지: ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"'
        sh 'docker image build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} .'
        echo "=== [Docker Build] 완료 ==="
      }
    }
    stage('Tag Docker Image') {
      agent { label 'controller' }
      steps {
        echo "=== [Docker Tag] latest 태그 추가 ==="
        sh 'docker image tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_LATEST}'
        echo "=== [Docker Tag] 완료 ==="
      }
    }
    stage('Publish Docker Image') {
      agent { label 'controller' }
      steps {
        echo "=== [Docker Push] Docker Hub로 이미지 푸시 시작 ==="
        withDockerRegistry(credentialsId: 'docker-registry-credential', url: 'https://index.docker.io/v1/') {
          sh 'docker image push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}'
          sh 'docker image push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_LATEST}'
        }
        echo "=== [Docker Push] 완료 ==="
      }
    }
    stage('Run Docker Container') {
      agent { label 'controller' }
      steps {
        echo "=== [Ansible Deploy] Ansible로 컨테이너 배포 시작 ==="
        // ansible-playbook 실행 시 이미지명을 변수로 전달
        sh '''
          ansible-playbook docker-container-deploy.yaml \
            -e "docker_image_name=${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
        '''
        echo "=== [Ansible Deploy] 완료 ==="
      }
    }
  }
}

